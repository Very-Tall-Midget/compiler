<program> ::= <function>
<function> ::= "int" <id> "(" ")" "{" { <block-item> } "}"
<block-item> ::= <statement> | <declaration>
<statement> ::= "return" <expr> ";" |
                | <exp> ";"
                | "if" "(" <exp> ")" <statement> [ "else" <statement> ]
<declarations> ::= "int" <id> [ = <exp>] { "," <id> [ = <exp>] } ";"
<expr> ::= <id> <assignment-op> <expr> | <conditional-expr>
<conditional-expr> ::= <logical-or-expr> [ "?" <expr> ":" <expr> ]
<logical-or-expr> ::= <logical-and-expr>
                    { "||" <logical-and-expr> }
<logical-and-expr> ::= <bit-or-expr> { "&&" <bit-or-expr> }
<bit-or-expr> ::= <bit-xor-expr> { "|" <bit-xor-expr> }
<bit-xor-expr> ::= <bit-and-expr> { "^" <bit-and-expr> }
<bit-and-expr> ::= <equality-expr> { "&" <equality-expr> }
<equality-expr> ::= <relational-expr>
                   { ("!=" | "==") <relational-expr> }
<relational-expr> ::= <shift-expr>
                     { ("<" | ">" | "<=" | ">=") <shift-expr> }
<shift-expr> ::= <additive-expr> { ("<<" | ">>") <additive-expr> }
<additive-expr> ::= <term> { ("+" | "-") <term> }
<term> ::= <factor> { ("*" | "/" | "%") <factor> }
<factor> ::= "(" <expr> ")" | <unary-op> <factor> | <int> | [ "++" | "--" ] <id> | <postfix-id>
<postfix-id> ::= <id> [ "++" | "--" ]
<unary-op> ::= "!" | "~" | "-"
<assignment-op> ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^="
