<program> ::= { <function> | <declarations> }
<function> ::= "int" [ <call-conv> ] <id> "(" [ "int" <id> { "," "int" <id> } ] ")" ( "{" { <block-item } "}" | ";" )
<block-item> ::= <statement> | <declaration>
<statement> ::= "return" <expr> ";" |
                | <expr-opt> ";"
                | "if" "(" <expr> ")" <statement> [ "else" <statement> ]
                | "{" { <block-item> } "}"
                | "for" "(" <expr-opt> ";" <expr-opt> ";" <expr-opt-cp> ")" <statement>
                | "for" "(" <declarations> <expr-opt> ";" <expr-opt-cp> ")" <statement>
                | "while" "(" <expr> ")" <statement>
                | "do" <statement> "while" "(" <expr> ")" ";"
                | "break" ";"
                | "continue" ";"
<declarations> ::= "int" <id> [ = <expr>] { "," <id> [ = <expr>] } ";"
<expr-opt> ::= <expr> <;> | <;>
<expr-opt-cp> ::= <expr> <)> | <)>
<expr> ::= <id> <assignment-op> <expr> | <conditional-expr>
<conditional-expr> ::= <logical-or-expr> [ "?" <expr> ":" <expr> ]
<logical-or-expr> ::= <logical-and-expr>
                    { "||" <logical-and-expr> }
<logical-and-expr> ::= <bit-or-expr> { "&&" <bit-or-expr> }
<bit-or-expr> ::= <bit-xor-expr> { "|" <bit-xor-expr> }
<bit-xor-expr> ::= <bit-and-expr> { "^" <bit-and-expr> }
<bit-and-expr> ::= <equality-expr> { "&" <equality-expr> }
<equality-expr> ::= <relational-expr>
                   { ("!=" | "==") <relational-expr> }
<relational-expr> ::= <shift-expr>
                     { ("<" | ">" | "<=" | ">=") <shift-expr> }
<shift-expr> ::= <additive-expr> { ("<<" | ">>") <additive-expr> }
<additive-expr> ::= <term> { ("+" | "-") <term> }
<term> ::= <factor> { ("*" | "/" | "%") <factor> }
<factor> ::= <function-call> | "(" <expr> ")" | <unary-op> <factor> | <int> | [ "++" | "--" ] <id> | <postfix-id>
<postfix-id> ::= <id> [ "++" | "--" ]
<unary-op> ::= "!" | "~" | "-"
<assignment-op> ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^="
<function-call> ::= <id> "(" [ <expr> { "," <expr> } ] ")"
<call-conv> ::= "__cdecl" | "__syscall"
